// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cc

import (
	"context"
	"github.com/aserto-dev/aserto-idp/pkg/cc/config"
	"github.com/aserto-dev/aserto-idp/pkg/mocks"
	"github.com/aserto-dev/aserto-idp/pkg/provider/retriever"
	"github.com/aserto-dev/clui"
	"github.com/aserto-dev/logger"
	"github.com/golang/mock/gomock"
	"io"
)

// Injectors from wire.go:

func BuildCC(logOutput logger.Writer, errorOutput logger.ErrWriter, output io.Writer, cfg *logger.Config) (*CC, error) {
	contextContext := context.Background()
	ghcrRetriever := retriever.NewGhcrRetriever()
	zerologLogger, err := logger.NewLogger(logOutput, errorOutput, cfg)
	if err != nil {
		return nil, err
	}
	ui := clui.NewUIWithOutput(output)
	configConfig := config.NewEmptyConfig()
	pluginsInfo := retriever.NewPluginsInfo(ghcrRetriever)
	cc := &CC{
		Context:     contextContext,
		Retriever:   ghcrRetriever,
		Log:         zerologLogger,
		UI:          ui,
		Config:      configConfig,
		pluginsInfo: pluginsInfo,
	}
	return cc, nil
}

func BuildTestCC(ctrl *gomock.Controller, cfg *logger.Config) (*CC, error) {
	contextContext := context.Background()
	mockRetriever := mocks.NewMockRetriever(ctrl)
	configConfig := config.NewEmptyConfig()
	pluginsInfo := retriever.NewPluginsInfo(mockRetriever)
	cc := &CC{
		Context:     contextContext,
		Retriever:   mockRetriever,
		Config:      configConfig,
		pluginsInfo: pluginsInfo,
	}
	return cc, nil
}
