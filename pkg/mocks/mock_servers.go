// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aserto-dev/go-grpc/aserto/idpplugin/v1 (interfaces: Plugin_DeleteClient,Plugin_ExportClient,Plugin_ImportClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	idpplugin "github.com/aserto-dev/go-grpc/aserto/idpplugin/v1"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockPlugin_DeleteClient is a mock of Plugin_DeleteClient interface.
type MockPlugin_DeleteClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlugin_DeleteClientMockRecorder
}

// MockPlugin_DeleteClientMockRecorder is the mock recorder for MockPlugin_DeleteClient.
type MockPlugin_DeleteClientMockRecorder struct {
	mock *MockPlugin_DeleteClient
}

// NewMockPlugin_DeleteClient creates a new mock instance.
func NewMockPlugin_DeleteClient(ctrl *gomock.Controller) *MockPlugin_DeleteClient {
	mock := &MockPlugin_DeleteClient{ctrl: ctrl}
	mock.recorder = &MockPlugin_DeleteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin_DeleteClient) EXPECT() *MockPlugin_DeleteClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPlugin_DeleteClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPlugin_DeleteClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPlugin_DeleteClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPlugin_DeleteClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPlugin_DeleteClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPlugin_DeleteClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPlugin_DeleteClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPlugin_DeleteClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPlugin_DeleteClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPlugin_DeleteClient) Recv() (*idpplugin.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*idpplugin.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPlugin_DeleteClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPlugin_DeleteClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockPlugin_DeleteClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPlugin_DeleteClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPlugin_DeleteClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockPlugin_DeleteClient) Send(arg0 *idpplugin.DeleteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPlugin_DeleteClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPlugin_DeleteClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockPlugin_DeleteClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPlugin_DeleteClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPlugin_DeleteClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockPlugin_DeleteClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPlugin_DeleteClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPlugin_DeleteClient)(nil).Trailer))
}

// MockPlugin_ExportClient is a mock of Plugin_ExportClient interface.
type MockPlugin_ExportClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlugin_ExportClientMockRecorder
}

// MockPlugin_ExportClientMockRecorder is the mock recorder for MockPlugin_ExportClient.
type MockPlugin_ExportClientMockRecorder struct {
	mock *MockPlugin_ExportClient
}

// NewMockPlugin_ExportClient creates a new mock instance.
func NewMockPlugin_ExportClient(ctrl *gomock.Controller) *MockPlugin_ExportClient {
	mock := &MockPlugin_ExportClient{ctrl: ctrl}
	mock.recorder = &MockPlugin_ExportClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin_ExportClient) EXPECT() *MockPlugin_ExportClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPlugin_ExportClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPlugin_ExportClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPlugin_ExportClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPlugin_ExportClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPlugin_ExportClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPlugin_ExportClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPlugin_ExportClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPlugin_ExportClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPlugin_ExportClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPlugin_ExportClient) Recv() (*idpplugin.ExportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*idpplugin.ExportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPlugin_ExportClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPlugin_ExportClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockPlugin_ExportClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPlugin_ExportClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPlugin_ExportClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockPlugin_ExportClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPlugin_ExportClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPlugin_ExportClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockPlugin_ExportClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPlugin_ExportClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPlugin_ExportClient)(nil).Trailer))
}

// MockPlugin_ImportClient is a mock of Plugin_ImportClient interface.
type MockPlugin_ImportClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlugin_ImportClientMockRecorder
}

// MockPlugin_ImportClientMockRecorder is the mock recorder for MockPlugin_ImportClient.
type MockPlugin_ImportClientMockRecorder struct {
	mock *MockPlugin_ImportClient
}

// NewMockPlugin_ImportClient creates a new mock instance.
func NewMockPlugin_ImportClient(ctrl *gomock.Controller) *MockPlugin_ImportClient {
	mock := &MockPlugin_ImportClient{ctrl: ctrl}
	mock.recorder = &MockPlugin_ImportClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin_ImportClient) EXPECT() *MockPlugin_ImportClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPlugin_ImportClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPlugin_ImportClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPlugin_ImportClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPlugin_ImportClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPlugin_ImportClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPlugin_ImportClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPlugin_ImportClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPlugin_ImportClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPlugin_ImportClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPlugin_ImportClient) Recv() (*idpplugin.ImportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*idpplugin.ImportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPlugin_ImportClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPlugin_ImportClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockPlugin_ImportClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPlugin_ImportClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPlugin_ImportClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockPlugin_ImportClient) Send(arg0 *idpplugin.ImportRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPlugin_ImportClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPlugin_ImportClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockPlugin_ImportClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPlugin_ImportClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPlugin_ImportClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockPlugin_ImportClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPlugin_ImportClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPlugin_ImportClient)(nil).Trailer))
}
