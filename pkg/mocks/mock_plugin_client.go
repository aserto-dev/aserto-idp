// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aserto-dev/idp-plugin-sdk/grpcplugin (interfaces: PluginClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	idpplugin "github.com/aserto-dev/go-grpc/aserto/idpplugin/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPluginClient is a mock of PluginClient interface.
type MockPluginClient struct {
	ctrl     *gomock.Controller
	recorder *MockPluginClientMockRecorder
}

// MockPluginClientMockRecorder is the mock recorder for MockPluginClient.
type MockPluginClientMockRecorder struct {
	mock *MockPluginClient
}

// NewMockPluginClient creates a new mock instance.
func NewMockPluginClient(ctrl *gomock.Controller) *MockPluginClient {
	mock := &MockPluginClient{ctrl: ctrl}
	mock.recorder = &MockPluginClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginClient) EXPECT() *MockPluginClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPluginClient) Delete(arg0 context.Context, arg1 ...grpc.CallOption) (idpplugin.Plugin_DeleteClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(idpplugin.Plugin_DeleteClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPluginClientMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPluginClient)(nil).Delete), varargs...)
}

// Export mocks base method.
func (m *MockPluginClient) Export(arg0 context.Context, arg1 *idpplugin.ExportRequest, arg2 ...grpc.CallOption) (idpplugin.Plugin_ExportClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Export", varargs...)
	ret0, _ := ret[0].(idpplugin.Plugin_ExportClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Export indicates an expected call of Export.
func (mr *MockPluginClientMockRecorder) Export(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockPluginClient)(nil).Export), varargs...)
}

// Import mocks base method.
func (m *MockPluginClient) Import(arg0 context.Context, arg1 ...grpc.CallOption) (idpplugin.Plugin_ImportClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Import", varargs...)
	ret0, _ := ret[0].(idpplugin.Plugin_ImportClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Import indicates an expected call of Import.
func (mr *MockPluginClientMockRecorder) Import(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockPluginClient)(nil).Import), varargs...)
}

// Info mocks base method.
func (m *MockPluginClient) Info(arg0 context.Context, arg1 *idpplugin.InfoRequest, arg2 ...grpc.CallOption) (*idpplugin.InfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*idpplugin.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockPluginClientMockRecorder) Info(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockPluginClient)(nil).Info), varargs...)
}

// Validate mocks base method.
func (m *MockPluginClient) Validate(arg0 context.Context, arg1 *idpplugin.ValidateRequest, arg2 ...grpc.CallOption) (*idpplugin.ValidateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Validate", varargs...)
	ret0, _ := ret[0].(*idpplugin.ValidateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockPluginClientMockRecorder) Validate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockPluginClient)(nil).Validate), varargs...)
}
