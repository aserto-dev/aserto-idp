syntax = "proto3";

option go_package = "github.com/aserto-dev/aserto-idp/pkg/proto;proto";

package proto;

import "aserto/api/v1/user.proto";
import "google/protobuf/struct.proto";
import "google/rpc/status.proto";

message InfoRequest {
}

message InfoResponse {
    // Use info from https://github.com/aserto-dev/proto/blob/main/public/aserto/common/info/v1/info.proto#L37 ??
    string system = 1;
    string version = 2;
    string build = 3;
    repeated ConfigElement config = 4;
}


// Use config from: https://github.com/aserto-dev/proto/blob/main/public/aserto/api/v1/connection.proto#L71 ??
enum ConfigElementKind {
    CONFIG_ELEMENT_KIND_UNKNOWN     = 0; // Unknown configuration element kind
    CONFIG_ELEMENT_KIND_ATTRIBUTE   = 1; // Normal attribute
    CONFIG_ELEMENT_KIND_SECRET      = 2; // Secret
    CONFIG_ELEMENT_KIND_CERTIFICATE = 3; // Certificate
  }
  
  enum ConfigElementType {
    CONFIG_ELEMENT_TYPE_UNKNOWN     = 0;
    CONFIG_ELEMENT_TYPE_STRING      = 1;
    CONFIG_ELEMENT_TYPE_INTEGER     = 2;
    CONFIG_ELEMENT_TYPE_BOOLEAN     = 3;
  }
  
  enum DisplayMode {
    DISPLAY_MODE_UNKNOWN            = 0;
    DISPLAY_MODE_NORMAL             = 1;
    DISPLAY_MODE_MASKED             = 2;
  }

message ConfigElement {
    int32 id = 1;
    ConfigElementKind kind = 2;
    ConfigElementType type = 3;
    string name = 4;
    string description = 5;
    string usage = 6;
    DisplayMode mode = 7;
    bool read_only = 8;
  }

// message ImportRequest{
//     // needs to be struct
//     map<string,string> options=1;
//     oneof data {
//         aserto.api.v1.User user = 3;
//         aserto.api.v1.UserExt user_ext = 4;
//       }
// }

// message ImportResponse{
//     int32 succededCount=1;
//     int32 failCount=2;
//     repeated google.rpc.Status status = 3;
// }

message ExportRequest{
    map<string,string> options=1;
}

message ExportResponse{
    oneof data {
        aserto.api.v1.User user = 3;
        aserto.api.v1.UserExt user_ext = 4;
      }
    google.rpc.Status status = 5;
}

// message DeleteRequest{
//     map<string,string> options=1;
//     oneof data {
//         aserto.api.v1.User user = 3;
//         aserto.api.v1.UserExt user_ext = 4;
//       }
// }

// message DeleteResponse{
//      int32 succededCount=1;
//      int32 failCount=2;
//      repeated google.rpc.Status status = 3;
// }

// message ValidateRequest{
//     map<string,string> options=1;
// }

// message ValidateResponse{
//     google.rpc.Status status = 1;
// }




service Plugin {
    rpc Info(InfoRequest) returns (InfoResponse);
    // rpc Import(stream ImportRequest) returns (ImportResponse);
    rpc Export(ExportRequest) returns (stream ExportResponse);
    // rpc Delete(stream DeleteRequest) returns (DeleteResponse);
    // rpc Validate(ValidateRequest) returns (ValidateResponse);
}
